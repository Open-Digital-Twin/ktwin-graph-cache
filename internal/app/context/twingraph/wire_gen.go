// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package TwinGraph

import (
	"github.com/Open-Digital-Twin/ktwin-graph-store/internal/app/context/twingraph/controller"
	"github.com/Open-Digital-Twin/ktwin-graph-store/internal/app/context/twingraph/domain/repository"
	"github.com/Open-Digital-Twin/ktwin-graph-store/internal/app/context/twingraph/usecase"
	"github.com/Open-Digital-Twin/ktwin-graph-store/internal/app/infra/cache"
	"github.com/Open-Digital-Twin/ktwin-graph-store/internal/app/infra/validator"
	"github.com/Open-Digital-Twin/ktwin-graph-store/internal/pkg/log"
)

// Injectors from wire.go:

func InitializeTwinGraphContainer(cacheConnection cache.CacheConnection) TwinGraphContainer {
	twinGraphMapper := repository.NewTwinGraphMapper()
	twinGraphRepository := repository.NewTwinGraphRepository(twinGraphMapper, cacheConnection)
	twinGraphUseCase := usecase.NewTwinGraphUseCase(twinGraphRepository)
	validatorValidator := validator.NewValidator()
	logger := log.NewLogger()
	twinGraphController := controller.NewTwinGraphController(twinGraphUseCase, twinGraphMapper, validatorValidator, logger)
	twinGraphContainer := NewTwinGraphContainer(twinGraphController, twinGraphRepository, twinGraphUseCase)
	return twinGraphContainer
}

// wire.go:

func NewTwinGraphContainer(controller2 controller.TwinGraphController, repository2 repository.TwinGraphRepository,

	useCase usecase.TwinGraphUseCase,
) TwinGraphContainer {
	return TwinGraphContainer{
		Controller: controller2,
		Repository: repository2,
		UseCase:    useCase,
	}
}

type TwinGraphContainer struct {
	Controller controller.TwinGraphController
	Repository repository.TwinGraphRepository
	UseCase    usecase.TwinGraphUseCase
}
